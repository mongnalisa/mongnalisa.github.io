{"pages":[],"posts":[{"title":"Python网络编程","text":"1. 服务器1.1 什么是socketsocket又叫套接字， 指的是网络通信的两端，分别是服务器和客户端socket编程指的就是通过代码实现客户端和服务器之间的通信 1.2 服务器的实现1.2.1 创建套接字对象family: ip类型， AF_INET -&gt; ipv4， AF_INET6 -&gt; ipv6type: 传输协议的类型, SOCK_STREAM -&gt; TCP, SOCK_DGRAM -&gt; UDPserver = socket.socket() 1.2.2 绑定IP地址和端口ip用来区分互联网上设备端口是用来区分一台计算上的不同的服务(应用)，值是0-65535，其中0-1024是著名端口。其他的随便选 bind((ip地址,端口号)) server.bind((‘10.7.190.127’, 8081)) 1.2.3 启动服务器（监听请求）listen(数量) - 这儿的数量指的是一次性能够处理的最大请求数 server.listen(255) 1.2.4 让服务器一直处于运行状态12while True: print(&apos;开始监听....&apos;) 1.2.5 等待客户端的请求123#程序运行到这个地方，会停下来，等到有客户端来连接服务器，才会接着往后执行connect, addr = server.accept()print(connect, addr) 1.2.6 发送消息 send(数据) - 发送数据，数据是二进制数据12message = input(&apos;&gt;&gt;&gt;&apos;)connect.send(message.encode(encoding=&apos;utf-8&apos;)) 1.2.7 接收消息 recv(字节数) - 接收数据,并且指定一次性接收的数据的大小的最大值；返回接收到的二进制数据1234# 程序运行到这个地方会停下来，直到客户端给服务器发送消息，才会接着执行data = connect.recv(1024)print(&apos;&lt;&lt;&lt;:&apos;)print(data.decode(encoding=&apos;utf-8&apos;)) 1.2.8 关闭连接1connect.close() 2. 客户端创建客户端套接字 2.1 创建套接字对象1client = socket.socket() 2.2 连接服务器12connect((ip地址, 端口))client.connect((&apos;10.7.190.127&apos;, 8080)) 2.3 接收消息123data = client.recv(1024)print(&apos;&lt;&lt;&lt;:&apos;)print(data.decode(encoding=&apos;utf-8&apos;)) 2.4 发送消息12message = input(&apos;&gt;&gt;&gt;:&apos;)client.send(message.encode(encoding=&apos;utf-8&apos;)) 2.5 关闭连接1client.close() 3. 多线程123import threadingfrom datetime import datetime, date, timefrom time import sleep 3.1 什么是进程一个正在运行的应用程序就是一个进程。系统会给每个进程分配一个独立的内存区域，用来保存程序运行过程中产生的数据，当进程结束的时候，这个内存区域会自动销毁 3.2 什么是线程进程想要执行任务，就必须要有线程。每个进程默认都有一个线程，这个线程叫主线程；其他的线程叫子线程程序默认都是在主线程中执行的一个线程中执行多个任务，任务是串行执行的(一个一个的按顺序执行)一个进程中如果有多个线程，多线程执行不同任务的时候是并行(同时执行) 3.3 python中怎么使用多线程python通过内置的threading模块来提供多线程相关技术;其中有一个Thread类，这个类的对象就是线程对象 1234567891011def download(film): print(&apos;开始下载: %s time: %s&apos; % (film, str(datetime.now()))) sleep(15) print(&apos;%s下载完成 time:%s&apos; % (film, str(datetime.now()))) print(threading.current_thread())# 在主线程中下载两个电影: 一个一个的下载，一个下载完才下载另一个，总耗时两个电影耗时之和# download(&apos;恋恋笔记本&apos;)# download(&apos;摔跤吧爸爸&apos;) 3.4 直接创建线程类的对象a.语法:线程对象 = Thread(target=函数, args=参数) - 创建一个线程对象，并且返回。b.说明函数 - function类型的变量; 这个函数的函数体就会在子线程中执行参数 - 元祖; 参数会传给target对应的函数 12t1 = threading.Thread(target=download, args=(&apos;大国崛起&apos;,))t2 = threading.Thread(target=download, args=(&apos;霸王别姬&apos;,)) 3.5 让线程开始执行任务线程对象.start() - 开始执行子线程中的任务1234567t1.start()t2.start()download(&apos;变形金刚&apos;)print(&apos;=======&apos;)# 某个线程出现异常，是线程直接结束；进程不一定结束，所有的线程都结束，进程才会结束print([1, 2][10])print(&apos;+++++++++++&apos;)","link":"/2018/11/19/Python Internet Programming/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/04/13/hello-world/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"PEP8","slug":"PEP8","link":"/tags/PEP8/"}],"categories":[{"name":"语言基础","slug":"语言基础","link":"/categories/语言基础/"}]}